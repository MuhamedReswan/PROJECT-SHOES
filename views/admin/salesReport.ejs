<%- include('../layout/admin/adminHeader.ejs') -%>

    <style>
        @media print {
            .no-print {
                display: none !important;
            }
        }
    </style>


    <div class="screen-overlay"></div>

    <section class="content-main">
        <div class="content-header">
            <div>
                <h2 class="content-title card-title">Sales List</h2>
                <p>Lorem ipsum dolor sit amet.</p>
            </div>
            <div class="no-print">
                <a href="/admin" class="btn btn-secondary">BACK</a><br>
                <a style="margin-top: 1rem;" fcx class="btn btn-primary" onclick="downloadPdf()">Download PDF</a>
                <!-- <a style="margin-top: 1rem;" class="btn btn-success" onclick="downloadExcel()">Download Excel</a> -->
                <a style="margin-top: 1rem;" class="btn btn-success" onclick="downloadExcel()">Download Excel</a>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-body">
                <div class="table-responsive" id="Reload">
                    <table class="table table-hover text-center" id="sales-table">
                        <thead>
                            <tr>
                                <th>No</th>
                                <th>Order ID</th>
                                <th>Image</th>
                                <th>Name</th>
                                <th>Price & Quantity</th>
                                <th>Total</th>
                                <th>Date</th>
                                <th>Payment Method</th>
                                <th class="text-center">Status</th>
                            </tr>
                        </thead>
                        <% let count=0 %>
                            <% orders.forEach((order)=>{ %>
                                <% order.products.forEach((product)=>{ %>
                                    <% count++ %>
                                        <tbody>
                                            <td>
                                                <%= count %>
                                            </td>
                                            <td>
                                                <%= order.orderId %>
                                            </td>
                                            <td>
                                                <div class="itemside">
                                                    <div class="left">
                                                        <img src="/user/assets/images/product-images/sharpedImages/<%=product.productId.images[0]%>"
                                                            class="img-sm img-thumbnail" alt="Item" />
                                                    </div>

                                                </div>
                                            </td>
                                            <td>
                                                <%= order.user.name %>
                                            </td>
                                            <td>
                                                <%= product.price %> x <%= product.quantity %>
                                            </td>
                                            <td>
                                                <%= product.price * product.quantity %>
                                            </td>
                                            <td>
                                                <%= (() => {
                                                    const date = new Date(order.date);
                                                    const formattedDate = date.getFullYear() + '-' +
                                                        ('0' + (date.getMonth() + 1)).slice(-2) + '-' +
                                                        ('0' + date.getDate()).slice(-2) + ' ' +
                                                        ('0' + date.getHours()).slice(-2) + ':' +
                                                        ('0' + date.getMinutes()).slice(-2) + ':' +
                                                        ('0' + date.getSeconds()).slice(-2);
                                                    return formattedDate;
                                                })() %>

                                            </td>
                                            <td>
                                                <%= order.paymentMethod %>
                                            </td>
                                            <td>
                                                <%= product.status %>
                                            </td>
                                        </tbody>
                                        <% }) %>
                                            <% }) %>
                    </table>
                    <!-- table-responsive.// -->
                </div>
            </div>
        </div>
        <!-- card end// -->
    </section>

    <!-- <script>
        

        function triggerExcelDownload(tableData) {
            const data = tableData;
            fetch('/admin/downloadExcel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            }).then((data) => {
                if (data.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Downloaded check downlods',
                        showConfirmButton: false
                    })
                    setTimeout(() => {
                        location.reload()

                    }, 1000);
                }
            })
        }

        function gatherTableData() {
            const tableRows = document.querySelectorAll('.table tbody tr');
            const tableData = [];

            tableRows.forEach(row => {
                const rowData = [];
                const cells = row.querySelectorAll('td');
                cells.forEach(cell => {
                    rowData.push(cell.textContent.trim()); // Extracting cell text content
                });
                tableData.push(rowData); // Pushing row data to the array
            });

            return tableData;
        }

        function downloadExcel() {
            const tableData = gatherTableData();
            triggerExcelDownload(tableData);
        }


    </script> -->


    <script>
function downloadPdf() {
            window.print();
        }


        function downloadExcel() {
            // Clone the table to avoid modifying the original
            var table = document.getElementById('sales-table').cloneNode(true);
    
            // Remove the image column from the cloned table
            for (var i = 0; i < table.rows.length; i++) {
                table.rows[i].deleteCell(2); // Assuming the image column is the 3rd column (index 2)
            }
    
            // Convert the table to a worksheet
            var worksheet = XLSX.utils.table_to_sheet(table);
    
            // Define the column widths
            var colWidths = [
                { wpx: 70 }, // No
                { wpx: 70 }, // Order ID
                { wpx: 70 }, // Name
                { wpx: 70 }, // Price & Quantity
                { wpx: 70 }, // Total
                { wpx: 70 }, // Date
                { wpx: 70 }, // Payment Method
                { wpx: 70 } // Status
            ];
    
            // Apply the column widths to the worksheet
            worksheet['!cols'] = colWidths;
    
            // Create a new Workbook and append the worksheet
            var workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet 1");
    
            // Convert the workbook to a binary string
            var wbout = XLSX.write(workbook, { bookType: 'xlsx', type: 'binary' });
    
            // Function to convert a string to an ArrayBuffer
            function s2ab(s) {
                var buf = new ArrayBuffer(s.length);
                var view = new Uint8Array(buf);
                for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;
                return buf;
            }
    
            // Create a Blob from the binary string
            var blob = new Blob([s2ab(wbout)], { type: "application/octet-stream" });
    
            // Create a link element
            var link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
    
            // Generate the file name
            var siteName = "MyWebsite"; // Replace with your site name
            var date = new Date();
            var timestamp = date.getFullYear() +
                            ('0' + (date.getMonth() + 1)).slice(-2) +
                            ('0' + date.getDate()).slice(-2) + '_' +
                            ('0' + date.getHours()).slice(-2) +
                            ('0' + date.getMinutes()).slice(-2) +
                            ('0' + date.getSeconds()).slice(-2);
            var fileName = siteName + '_' + timestamp + '.xlsx';
    
            // Set the file name for the download
            link.download = fileName;
    
            // Append the link to the document body and trigger the click event
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    </script>
    
    
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



    <%- include('../layout/admin/adminFooter.ejs') -%>